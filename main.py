import logging
logging.getLogger("transformers").setLevel(logging.ERROR)

from fastapi import FastAPI, UploadFile, File, Depends, Form, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from transformers import TrOCRProcessor, VisionEncoderDecoderModel
from typing import Optional, List
from PIL import Image
import pytesseract
import io

from pathlib import Path
from dotenv import load_dotenv
import os

# üîó –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from routers import user, admin, comment
from db.database import SessionLocal, engine
from crud import admin_crud
from schemas import admin_schemas
from models import admin_models, user_models, comment_models

# üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)
load_dotenv()

# üî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –ë–î
admin_models.Base.metadata.create_all(bind=engine)
user_models.Base.metadata.create_all(bind=engine)
comment_models.Base.metadata.create_all(bind=engine)

# üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø —Å React (CORS)
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "https://scantext.z36.web.core.windows.net",
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# üì¶ OCR-–º–æ–¥–µ–ª—å TrOCR
processor = TrOCRProcessor.from_pretrained("microsoft/trocr-base-printed")
model = VisionEncoderDecoderModel.from_pretrained("microsoft/trocr-base-printed")

# ‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ë–î
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.include_router(user.router, prefix="/user", tags=["User"])
app.include_router(admin.router, prefix="/admin", tags=["Admin"])
app.include_router(comment.router, prefix="/comments", tags=["Comments"])

# üñº –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (TrOCR)
@app.post("/extract-text")
async def extract_text(file: UploadFile = File(...)):
    try:
        image = Image.open(io.BytesIO(await file.read())).convert("RGB")
        pixel_values = processor(images=image, return_tensors="pt").pixel_values
        generated_ids = model.generate(pixel_values)
        text = processor.batch_decode(generated_ids, skip_special_tokens=True)[0]
        return {"text": text}
    except Exception as e:
        return {"error": f"TrOCR error: {str(e)}"}

# üñº –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (Tesseract - –æ–¥–∏–Ω —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
@app.post("/tesseract-ocr")
async def tesseract_ocr(
    file: UploadFile = File(...),
    lang: List[str] = Form(["eng"])
):
    try:
        image = Image.open(io.BytesIO(await file.read())).convert("RGB")
        lang_code = '+'.join(lang)

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º
        raw_text = pytesseract.image_to_string(image, lang=lang_code)

        # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–∞–π—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è
        safe_text = raw_text.encode('utf-8', errors='ignore').decode('utf-8', errors='ignore')

        return {"text": safe_text.strip()}

    except Exception as e:
        return {"error": f"Tesseract error: {str(e)}"}

# üîò –ö–æ—Ä–Ω–µ–≤–æ–π —Ç–µ—Å—Ç
@app.get("/")
def root():
    return {"message": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ScanText API"}

# üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
@app.get("/test-db")
def test_db(db: Session = Depends(get_db)):
    users = db.query(user_models.User).all()
    return {"user_count": len(users)}

# üßπ –£–¥–∞–ª–µ–Ω–∏–µ __pycache__ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
def delete_pycache_dirs(base_path):
    pycache_dirs = list(Path(base_path).rglob("__pycache__"))
    for dir_path in pycache_dirs:
        for file in dir_path.glob("*"):
            file.unlink()
        dir_path.rmdir()
    return len(pycache_dirs)

# delete_pycache_dirs(".")  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
